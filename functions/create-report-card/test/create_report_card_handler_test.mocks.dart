// Mocks generated by Mockito 5.4.5 from annotations
// in create_report_card/test/create_report_card_handler_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:create_report_card/report_card_generator.dart' as _i5;
import 'package:gradebee_function_helpers/helpers.dart' as _i2;
import 'package:gradebee_models/common.dart' as _i6;
import 'package:logging/logging.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSimpleLogger_0 extends _i1.SmartFake implements _i2.SimpleLogger {
  _FakeSimpleLogger_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFuture_1<T1> extends _i1.SmartFake implements _i3.Future<T1> {
  _FakeFuture_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLogger_2 extends _i1.SmartFake implements _i4.Logger {
  _FakeLogger_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ReportCardGenerator].
///
/// See the documentation for Mockito's code generation for more information.
class MockReportCardGenerator extends _i1.Mock
    implements _i5.ReportCardGenerator {
  @override
  _i2.SimpleLogger get logger =>
      (super.noSuchMethod(
            Invocation.getter(#logger),
            returnValue: _FakeSimpleLogger_0(this, Invocation.getter(#logger)),
            returnValueForMissingStub: _FakeSimpleLogger_0(
              this,
              Invocation.getter(#logger),
            ),
          )
          as _i2.SimpleLogger);

  @override
  _i3.Future<List<_i6.ReportCardSection>> generateReportCard(
    _i6.ReportCard? reportCard,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#generateReportCard, [reportCard]),
            returnValue: _i3.Future<List<_i6.ReportCardSection>>.value(
              <_i6.ReportCardSection>[],
            ),
            returnValueForMissingStub:
                _i3.Future<List<_i6.ReportCardSection>>.value(
                  <_i6.ReportCardSection>[],
                ),
          )
          as _i3.Future<List<_i6.ReportCardSection>>);

  @override
  dynamic createUserPrompt(List<String>? studentNotes, String? studentName) =>
      super.noSuchMethod(
        Invocation.method(#createUserPrompt, [studentNotes, studentName]),
        returnValueForMissingStub: null,
      );

  @override
  dynamic createSystemPrompt(List<_i6.ReportCardTemplateSection>? sections) =>
      super.noSuchMethod(
        Invocation.method(#createSystemPrompt, [sections]),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseService extends _i1.Mock implements _i2.DatabaseService {
  @override
  _i3.Future<String> insert(String? collectionId, Map<String, dynamic>? data) =>
      (super.noSuchMethod(
            Invocation.method(#insert, [collectionId, data]),
            returnValue: _i3.Future<String>.value(
              _i7.dummyValue<String>(
                this,
                Invocation.method(#insert, [collectionId, data]),
              ),
            ),
            returnValueForMissingStub: _i3.Future<String>.value(
              _i7.dummyValue<String>(
                this,
                Invocation.method(#insert, [collectionId, data]),
              ),
            ),
          )
          as _i3.Future<String>);

  @override
  _i3.Future<List<T>> list<T>(
    String? collectionId,
    T Function(Map<String, dynamic>)? fromJson, [
    List<String>? queries = const [],
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#list, [collectionId, fromJson, queries]),
            returnValue: _i3.Future<List<T>>.value(<T>[]),
            returnValueForMissingStub: _i3.Future<List<T>>.value(<T>[]),
          )
          as _i3.Future<List<T>>);

  @override
  _i3.Future<T> get<T>(
    String? collectionId,
    T Function(Map<String, dynamic>)? fromJson,
    String? documentId, [
    List<String>? queries = const [],
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#get, [
              collectionId,
              fromJson,
              documentId,
              queries,
            ]),
            returnValue:
                _i7.ifNotNull(
                  _i7.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#get, [
                      collectionId,
                      fromJson,
                      documentId,
                      queries,
                    ]),
                  ),
                  (T v) => _i3.Future<T>.value(v),
                ) ??
                _FakeFuture_1<T>(
                  this,
                  Invocation.method(#get, [
                    collectionId,
                    fromJson,
                    documentId,
                    queries,
                  ]),
                ),
            returnValueForMissingStub:
                _i7.ifNotNull(
                  _i7.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#get, [
                      collectionId,
                      fromJson,
                      documentId,
                      queries,
                    ]),
                  ),
                  (T v) => _i3.Future<T>.value(v),
                ) ??
                _FakeFuture_1<T>(
                  this,
                  Invocation.method(#get, [
                    collectionId,
                    fromJson,
                    documentId,
                    queries,
                  ]),
                ),
          )
          as _i3.Future<T>);

  @override
  _i3.Future<void> delete(String? collectionId, String? documentId) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [collectionId, documentId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> update(
    String? collectionId,
    Map<String, dynamic>? data,
    String? documentId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#update, [collectionId, data, documentId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [SimpleLogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockSimpleLogger extends _i1.Mock implements _i2.SimpleLogger {
  @override
  _i4.Logger get logger =>
      (super.noSuchMethod(
            Invocation.getter(#logger),
            returnValue: _FakeLogger_2(this, Invocation.getter(#logger)),
            returnValueForMissingStub: _FakeLogger_2(
              this,
              Invocation.getter(#logger),
            ),
          )
          as _i4.Logger);

  @override
  void log(String? message) => super.noSuchMethod(
    Invocation.method(#log, [message]),
    returnValueForMissingStub: null,
  );

  @override
  void error(String? message, [Object? error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#error, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );
}
